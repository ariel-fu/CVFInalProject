@startuml

class Puck {
	- Position p
	- Velocity v
	- IPuckListener[] listeners
	--
	Puck(Position p)
	--
	+ void setVelocity(Velocity v)
 	+ void addListener(IPuckListener listener)
	+ Position getPosition()
	+ void tick()
	..
	calculate position using current position and velocity	
}

interface IPuckListener {
	update(Puck p)
}

class Velocity {
	- Position p
	- double speed
}

class Position {
	+ int x
	+ int y
}

class Wall {
	- Position leftLowerCorner
	- int width
	- int height
	
	Wall(corner,width,height)
}

class Canvas {
	- Wall wall		
	- Puck[] pucks		
	- PuckHistory[] histories
	
	MAIN()
	void init()
	void start()
	void stop()
	void reset()
	- void tick()
}

class Java.Line {
	- Color c
	- Position start
	- Position end
	--
	void draw()
}

class Java.Color
Java.Line o-- Java.Color


class PuckHistory{
	- Position[] positions
	--
	- update()
	..
		Save puck's position to positions	
	--
	- tick()
	..
		Set position to next position	
	--
	- Position getNext()	
}

PuckHistory --|> IPuckListener
PuckHistory --|> Puck

Wall --|> IPuckListener
Puck --|> IPuckListener

Canvas "1" *-- "N" Puck
Canvas "1" *-- "1" Wall
Canvas "1" *-- "N" PuckHistory
Canvas *-- UI

Puck "1" *-- "1" Velocity
Puck "1" *-- "1" Position


namespace UI #DDDDDD {
	class PuckLine {
		- int start
		- int end
		void update() 
		..
		start = end;
		end = puck.getPosition;
		draw();
	}
	
	PuckLine --|> Java.Line
}
UI.PuckLine --|> IPuckListener

@enduml