Specifications (requirements)

1) Write Java source code that is consistent, professional looking, and easy to read
2) A file header with assignment, name, author(s), and email address(es), due date,
other source credits, and known bugs
3) Comments for all public members of the class: class header comment, 
field (data member) comments, and method header comments
4) Private members may be added, removed, and edited as you like, and they must
be commented
5) you may not add any public members to your classes outside of those provided
in the starter code
6) private inner classes may be added, removed, edited as you desire.
7) use in-line comments to describe high-level algorithm choices and steps 

1. Define (code) the Graph class
 * must implement operations described in the provided GraphADT interface in an
efficient way
 * must handle corner cases
 * must document design choices that you make in your implementation

2. Define and code PackageManager class.
 * must implement all public methods
 * may define new private fields or methods

3. Design and unit test Graph and PackageManager 
4. Submit files to GradeScope and Canvas
___________________________________________________________________________________________

Example json shared dependencies 
{
	"packages": [
    	{
        	"name": "A",
        	"dependencies": ["B","C"]
   	 	},
	    {
	        "name": "B",
	        "dependencies": ["D"]
	    },
	    {
	    	"name": "C",
	    	"dependencies": ["D"]
	    }
	] 
}

A depends on B and C
B depends on D
C depends on D
So A depends on B, C, and D
___________________________________________________________________________________________
Example Runs for Package Manager
Graph Challenge #1: This graph is disconnected and contains an undirected cycle, 
which should not cause any cycle exception.
	A -> B
	A -> C
	B -> C
	D -> E
	D -> F
Graph Challenge #2: This graph should cause cycle exception.
	A -> B
	A -> C
	B -> C
	C -> A
Graph Challenge #3: This graph should not cause any exceptions
	A -> B
	B -> C
	B -> D
	C -> D
