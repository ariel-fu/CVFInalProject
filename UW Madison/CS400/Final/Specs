Program Requirements
Internal Data Structure
	- must store data in an internal data structure
	- may be user-defined or a Java Collection type
	- may use multiple internal structures
User Interface(UI)
	- must be a Graphic User interface coded by student using JavaFX library.  (No build tools allowed)
	- must be interactive (User must be able to input data and control what happens and is displayed).
File I/O
	- program must read in data from a csv or json file to populate the internal data structure.  Must do this at the start of program or as requested by the user via GUI.  If you wish to use a different text-only data file format, ask first.  
	- program must be able to save (write) the internal data of the program to a csv or json file at the end of the program, or when requested by the user.
Documentation (help)
	- The source code must be modular, use interfaces, classes, methods, and code blocks to break the problem into small easy to implement, test, and maintain segments.
	- The UI must provide sufficient instructions and help tips for new users to navigate.
	- The source code must have interface, class, and method headers and sufficient inline comments for a new developer (TA/Grader) to navigate and maintain the program source.
Testing
	- Strictly speaking, testing is not required.  But, if you do write test suites for any parts of your program, you can earn some credit for that work if your final project does not work as you designed and imagine.
	- If you wish to use a data structure that you have implemented, you may do so.  Be sure to document where the structure originated and include the test files for that structure.
	
The user must be able to:
- Must be able to read milk weight data that is stored in the given input data file formats (see csv.zip for samples, but do not hard-code as we must be able load our own csv data files).  Do not limit the farm id to those you know from sample.  Assume that some user will have their own farm ids that may be different.  Accept any string as a farm id.
- [optional] Must be able to write internal data to a file with same format as input files.  This will allow you to use your program to create new data for loading on a later run.
- Must handle bad user input without crashing and with reasonable error messages for the user.  Note: it does not have to accept and fix bad data, and may end the program in most severe cases, but it must be clear to the user what went wrong.
- [optional] Must allow the user to add/edit/remove milk weight information for the farms for each month in the current data set
- [optional] Must be able add data via GUI for a new month and or a new farm.  (Allow the user to enter the farm ID, and save and store as all CAPS).
- Must display statistics as described below for individual farms, any given month
- The UI components must be dynamic with only appropriate user interface controls being active if they apply.   
Must hide/show user controls as appropriate.
- The final design must be modular and support JUnit testing of independent data and computation components.  (This is a requirement even if you do not write the unit tests for your types.)
The internal data structure must be efficient enough for any required query options.
Must show/hide/compute summary information about milk received and the total share of net profit.


Output
1. must be able to write data to a file, and display computed results to the user via the GUI (charts would be nice to, but data tables are accepted)

2. the user must be able to choose which way (write to file or display) and be able to select date ranges, months, or years

3. the details of the output are up to your team, but the value must match our expect for any date range and data set chosen

FARM REPORT [required, get at least this one working]
1. Prompt user for a farm id and year (or use all available data)

2. Then, display the total milk weight and percent of the total of all farm for each month.

3. Sort, the list by month number 1-12, show total weight, then that farm's percent of the total milk received for each month.

ANNUAL REPORT [next most important to get working]
1. Ask for year.

2. Then display list of total weight and percent of total weight of all farms by farm for the year.

3. Sort by Farm ID, or you can allow the user to select display ascending or descending by weight.

MONTHLY REPORT [next most important to get working]
1. Ask for year and month.

2. Then, display a list of totals and percent of total by farm.

3. The list must be sorted by Farm ID, or you can prompt for ascending or descending by weight. 

DATE RANGE REPORT [least points, but still worth some if you can get this working]
Prompt user for start date (year-month-day) and end month-day,

Then display the total milk weight per farm and the percentage of the total for each farm over that date range.

The list must be sorted by Farm ID, or you can prompt for ascending or descending order by weight or percentage.

GUI
- must allow the user add data by reading in from a file
- must allow the user to add/edit/remove existing data for a given farm, year, month, and day
- must allow the user to display min, max, average, by month for user specified: Farm and year
- must allow the user to display min, max, average, for all farms for user-specified: month-year
- must include each farm's percent of the total (known as their share) for any display showing all farms
- must allow user to display each farm's share (% of milk for given month or year) of net sales 