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


from regression import *
import numpy as np

get_dataset('bodyfat.csv')
dataset = get_dataset('bodyfat.csv')
dataset.shape


print_stats(dataset, 1)

regression(dataset, cols=[2,3], betas=[0,0,0])
regression(dataset, cols=[2,3,4], betas=[0,-1.1,-.2,3])


gradient_descent(dataset, cols=[2,3], betas=[0,0,0])

gradient_descent(dataset, cols=[1,4], betas=[0,0,0])


iterate_gradient(dataset, cols=[1,8], betas=[400,-400,300], T=10, eta=1e-4)

iterate_gradient(dataset, cols=[1,4], betas=[400,-400,10], T=5, eta=1e-4)


compute_betas(dataset, cols=[1,2])


compute_betas(dataset, cols=[1,2,8,9])


predict(dataset, cols=[1,2], features=[1.0708, 23])


synthetic_datasets(np.array([0,2]), np.array([0,1]), np.array([[4]]), 1)


plot_mse()



predict(dataset, cols=[1,2], features=[1.0665, 39])

predict(dataset, cols=[1,3], features=[1.0665, 148.5])

predict(dataset, cols=[1,4], features=[1.0665, 71.25])

predict(dataset, cols=[1,5], features=[1.0665, 20.6])

predict(dataset, cols=[1,6], features=[1.0665, 34.6])

predict(dataset, cols=[1,7], features=[1.0665, 89.8])

predict(dataset, cols=[1,8], features=[1.0665, 79.5])


predict(dataset, cols=[1,9], features=[1.0665, 92.7])

predict(dataset, cols=[1,10], features=[1.0665, 52.7])

predict(dataset, cols=[1,11], features=[1.0665, 37.5])

predict(dataset, cols=[1,12], features=[1.0665, 21.9])

predict(dataset, cols=[1,13], features=[1.0665, 28.8])

predict(dataset, cols=[1,14], features=[1.0665, 26.8])

predict(dataset, cols=[1,15], features=[1.0665, 17.9])






dataset = np.array([[2, 2], [4, 6]])
compute_betas(dataset, cols=[1])
plot_mse()



get_dataset('bodyfat.csv')
dataset = get_dataset('bodyfat.csv')
dataset = get_dataset('bodyfat.csv')

regression(dataset, cols=[2,3], betas=[0,0,0])
regression(dataset, cols=[2,3,4], betas=[0,-1.1,-.2,3])

gradient_descent(dataset, cols=[2,3], betas=[0,0,0])
gradient_descent(dataset, cols=[1,4], betas=[0,0,0])


iterate_gradient(dataset, cols=[1,8], betas=[400,-400,300], T=10, eta=1e-4)
iterate_gradient(dataset, cols=[1,4], betas=[400,-400,10], T=5, eta=1e-4)

dataset = np.array([[2, 2], [4, 6]])
compute_betas(dataset, cols=[1,2])
compute_betas(dataset, cols=[1,2,8,9])


predict(dataset, cols=[1,2], features=[1.0708, 23])

synthetic_datasets(np.array([0,2]), np.array([0,1]), np.array([[4]]), 1)


print_stats(dataset, 1)